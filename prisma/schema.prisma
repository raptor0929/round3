generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GroupStatus {
  ACTIVE
  PENDING
  COMPLETED
}

enum GroupMemberRole {
  MEMBER
  ADMIN
}

enum PaymentFrequency {
  WEEKLY
  MONTHLY
}

enum Web3Token {
  USDC
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  walletAddress String // The web3 wallet address used for login
  groups        GroupMember[]

  @@unique([walletAddress])
  @@map("users")
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title            String
  description      String?
  members          GroupMember[]
  maximumMembers   Int
  fundingAmount    Float // The fixed amount for each round
  nextPaymentDate  DateTime
  paymentFrequency PaymentFrequency @default(MONTHLY)
  public           Boolean          @default(false)
  status           GroupStatus      @default(PENDING)
  startDate        DateTime

  nextPayeeId String?      @unique // References the next payee
  nextPayee   GroupMember? @relation("NextPayee", fields: [nextPayeeId], references: [id])

  groupContractAddress String // The address of the smart contract managing the payments
  token                Web3Token @default(USDC) // The token used for payments in this group, defaulting to USDC on Solana

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  groupId String
  user    User            @relation(fields: [userId], references: [id])
  group   Group           @relation(fields: [groupId], references: [id])
  role    GroupMemberRole @default(MEMBER)

  contributions       Contribution[] // List of contributions per round
  memberWalletAddress String // The web3 wallet address linked to this group membership

  nextPayeeForGroup Group? @relation("NextPayee") // Opposite side of the NextPayee relation, one-to-one

  groupPosition Int // The position of the member in the group, used for determining the next payee

  @@unique([userId, groupId])
  @@map("groupmembers")
}

model Contribution {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  amount          Float
  transactionHash String // Transaction hash from Solana smart contract
  groupMemberId   String
  groupMember     GroupMember @relation(fields: [groupMemberId], references: [id])

  @@map("contributions")
}
